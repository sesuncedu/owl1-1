#summary Page for the Macros and Syntax OWLED task force
#labels OWLED,Taskforce

= Macros and Syntax Task Force =

Point person: [mailto:alanruttenberg@gmail.com Alan Ruttenberg]

Idea is to allow for programmable extensions to syntax to enable easy construction of [http://en.wikipedia.org/wiki/Domain-specific_programming_language domain specific languages](DSLs) based on OWL. Inspired by the [http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node97.html Common Lisp macro facility]

= Details =

Starting point is the abstract (sans followup paper, unfortunately) submitted to OWLED 2007:

[http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-258/paper44.pdf Hey! You Got Imperative in My Declarative! or  A Mashup Made in Heaven: Making OWL friendlier with Javascript. ]

See also, an example of macros prototyped in [http://esw.w3.org/topic/LSW LSW], in [http://svn.mumble.net:8080/svn/lsw/trunk/owl/reactions.lisp reactions.lisp] that allows one to write: `(reaction !reaction1 ((2 !h) !o) <=> !h2o)`

Another example developed to illustrate how to write a certain class of
[http://lists.w3.org/Archives/Public/public-semweb-lifesci/2007Feb/0076.html rules useful for medical diagnosis]. This one lets you write things like: `(patient-with-symptoms !patient3 !coughs !sneezes !turnsBlue)`

My initial thoughts are to have macros expand into the functional syntax, represented as some data structure in the language in which the macros are implemented.  An open question is whether that structure should be modified from the "outside", as with a DOM, or from the "inside", by implementing a lisp-like interpreter to do the macro-expansion.

Noteworthy:
  * [http://www.ordnancesurvey.co.uk/oswebsite/partnerships/research/publications/docs/2007/Rabbit_Language_v1.pdf The Rabbit Language]

This page maintained by [mailto:alanruttenberg@gmail.com Alan Ruttenberg]. Feel free to edit.